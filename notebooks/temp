#this is how i imagine i can optimize this

def fix_typos(self, text, replacement = None, cutoff=80):
		"""
		vocabulary : a list of strings (tokens)
		term: a string which exists in vocabulary
		replace: a string which all matche vocabularyw ill get replaced with.
		cutoff: number between 0 and 100. See fuzzywuzzy documentation for more info.
	
		Note: does not handle words at end of sentence properly (period on last word)
	
		String text will be split into sentences and processed, replacing typos in each sentence and then joined back together.
		"""

		#we will assume text has already been cleaned.
		#separate sentences
		sentence_separators = re.findall('[\n?!.]+', text) + ['']
		sentences = re.split('[\n?!.]+', text)
		#edge case thing.
		if not sentences[-1]:
			del sentences[-1]

		text = [] #reset text obj
		#process each sentence in sentences
		for ind, sent in enumerate(sentences):
			repaired = set()
			tokens = sent.split()

			fixes = process.extractBests
			for term, interval in self.vocabulary.items():
				#convert sentence to a dict, keeping only relevant words which have not been changed already
				candidates = {key:value for key, value in enumerate(tokens) if value != term and key not in repaired and interval[0] <= len(value) <= interval[1]}
				#compare using levenshtein distance (requires fuzzywuzzy and python-levenshtein)
				results = fixes(term,candidates, limit=None, score_cutoff=cutoff, scorer=fuzz.ratio)		
				#update tokens
				if not replacement:
					for match in results:
						tokens[match[2]] = term #FIXME: can this be faster using https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Initializing_Dictionary_Elements
						repaired.add(match[2]) #add to the list of indexes of fixed typos #FIXME https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Initializing_Dictionary_Elements
				else:
					for match in results:
						tokens[match[2]] = replacement
						repaired.add(match[2])
			if tokens:
				sent = 
				#join sentences back together
				text += [intersperse(tokens , ' ') + sentence_separators[ind] + ' '] #this shoul dbe adding to a list

				
		return ''.join(text)